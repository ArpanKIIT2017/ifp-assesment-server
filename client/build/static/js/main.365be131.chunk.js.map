{"version":3,"sources":["components/AuthService.js","components/d3Chart.js","components/Device.js","App.js","components/withAuth.js","serviceWorker.js","components/Login.js","index.js","logo.svg"],"names":["AuthService","domain","this","fetch","bind","login","getProfile","username","password","method","mode","body","JSON","stringify","then","res","setToken","token","Promise","resolve","getToken","isTokenExpired","decode","exp","Date","now","err","idToken","localStorage","setItem","getItem","removeItem","url","options","headers","loggedIn","_checkStatus","response","json","status","error","Error","statusText","D3Chart","props","data","map","dataPoint","load","time","parse","console","log","drawMyChart","margin","width","height","svg","d3","refs","my_dataviz","append","attr","x","d","range","call","y","datum","t0","t1","step","startTime","endTime","times","setUTCDate","getUTCDate","push","ref","React","Component","Device","device","graphData","className","key","type","onClick","e","ExportToCsv","fieldSeparator","quoteStrings","decimalSeparator","showLabels","showTitle","title","useTextFile","useBom","useKeysAsHeaders","generateCsv","getCSV","Auth","withAuth","AuthComponent","state","user","profile","setState","logout","history","replace","deviceStatus","deviceList","initialData","ready","socket","io","on","emit","setUpGraphData","temp","forEach","dataRow","deviceId","newTime","mostRecentRecordedStatusAndTime","lastEntryTime","a","setTimeout","initiateProcess","devices","handleLogout","disconnect","Boolean","window","location","hostname","match","Login","handleChange","handleFormSubmit","onSubmit","placeholder","name","onChange","value","target","preventDefault","catch","alert","ReactDOM","render","exact","path","component","App","document","getElementById","navigator","serviceWorker","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.365be131.chunk.js","sourcesContent":["import decode from 'jwt-decode';\nexport default class AuthService {\n    // Initializing important variables\n    constructor(domain) {\n        this.domain = domain || '' // API server domain\n        this.fetch = this.fetch.bind(this) // React binding stuff\n        this.login = this.login.bind(this)\n        this.getProfile = this.getProfile.bind(this)\n    }\n\n    login(username, password) {\n        // Get a token from api server using the fetch api\n        return this.fetch(`${this.domain}/login`, {\n            method: 'POST',\n            mode: 'cors', // no-cors, *cors, same-origin\n            body: JSON.stringify({\n                username,\n                password\n            })\n        }).then(res => {\n            this.setToken(res.token) // Setting the token in localStorage\n            return Promise.resolve(res);\n        })\n    }\n    // async login(username, password) {\n    //     // Get a token from api server using the fetch api\n    //     const res = await this.fetch(`${this.domain}/login`, {\n    //         method: 'POST',\n    //         body: JSON.stringify({\n    //             username,\n    //             password\n    //         })\n    //     });\n        \n    //     this.setToken(res.token) // Setting the token in localStorage\n    //     return res;\n    // }\n\n    loggedIn() {\n        // Checks if there is a saved token and it's still valid\n        const token = this.getToken() // GEtting token from localstorage\n        return !!token && !this.isTokenExpired(token) // handwaiving here\n    }\n\n    isTokenExpired(token) {\n        try {\n            const decoded = decode(token);\n            if (decoded.exp < Date.now() / 1000) { // Checking if token is expired. N\n                return true;\n            }\n            else\n                return false;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n\n    setToken(idToken) {\n        // Saves user token to localStorage\n        localStorage.setItem('id_token', idToken)\n    }\n\n    getToken() {\n        // Retrieves the user token from localStorage\n        return localStorage.getItem('id_token')\n    }\n\n    logout() {\n        // Clear user token and profile data from localStorage\n        localStorage.removeItem('id_token');\n    }\n\n    getProfile() {\n        // Using jwt-decode npm package to decode the token\n        return decode(this.getToken());\n    }\n\n\n    fetch(url, options) {\n        // performs api calls sending the required authentication headers\n        const headers = {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n        }\n\n        // Setting Authorization header\n        // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\n        if (this.loggedIn()) {\n            headers['Authorization'] = 'Bearer ' + this.getToken()\n        }\n\n        return fetch(url, {\n            headers,\n            ...options\n        })\n            .then(this._checkStatus)\n            .then(response => response.json())\n    }\n\n    _checkStatus(response) {\n        // raises an error in case response status is not a success\n        if (response.status >= 200 && response.status < 300) { // Success status lies between 200 to 300\n            return response\n        } else {\n            var error = new Error(response.statusText)\n            error.response = response\n            throw error\n        }\n    }\n}","import React from 'react';\nimport * as d3 from 'd3'\n\nexport default class D3Chart extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    componentDidMount() {\n        //Read the data\n        const data = this.props.data.map((dataPoint) => {\n            return {\n                load: dataPoint.load,\n                time: Date.parse(dataPoint.time)\n            }\n        })\n        console.log(data)\n\n        this.drawMyChart(data)\n    }\n\n    drawMyChart (data) {\n        let margin = {top: 10, right: 30, bottom: 30, left: 60},\n        width = 460 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom;\n\n        let svg = d3.select(this.refs.my_dataviz)\n        .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n            .attr(\"transform\",\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        // Add X axis --> it is a date format\n        let x = d3.scaleTime()\n        .domain(d3.extent(data, function(d) { return d.time; }))\n        .range([ 0, width ]);\n            svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x))     \n        \n\n        // Add Y axis\n        let y = d3.scaleLinear()\n        .domain([0, d3.max(data, function(d) { return +d.load; })])\n        .range([ height, 0 ]);\n            svg.append(\"g\")\n        .call(d3.axisLeft(y));\n\n        // Add the line\n        svg.append(\"path\")\n        .datum(data)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"steelblue\")\n        .attr(\"stroke-width\", 1.5)\n        .attr(\"d\", d3.line()\n            .x(function(d) { return x(d.time) })\n            .y(function(d) { return y(d.load) })\n            )\n\n    }\n    \n    customTickFunc (t0, t1, step)\n    {\n        var startTime = new Date(t0),\n            endTime= new Date(t1), times = [];\n        endTime.setUTCDate(endTime.getUTCDate() + 1);\n        while (startTime < endTime) {\n            startTime.setUTCDate(startTime.getUTCDate() + 2);\n            times.push(new Date(startTime));\n        }\n        return times;\n    }\n\n    render() {\n        return(\n            <div ref=\"my_dataviz\">\n                \n            </div>\n        )\n    }\n}","import React from 'react';\nimport './device.css';\nimport D3Chart from './d3Chart';\nimport { ExportToCsv } from 'export-to-csv';\n\nfunction getCSV(data) {\n    \n    const options = { \n        fieldSeparator: ',',\n        quoteStrings: '\"',\n        decimalSeparator: '.',\n        showLabels: true, \n        showTitle: true,\n        title: 'Device data',\n        useTextFile: false,\n        useBom: true,\n        useKeysAsHeaders: true,\n        // headers: ['Column 1', 'Column 2', etc...] <-- Won't work with useKeysAsHeaders present!\n      };\n     \n    const csvExporter = new ExportToCsv(options);\n    csvExporter.generateCsv(data);\n}\n\n\nexport default function Device(device, graphData) {\n    const status = graphData[device['deviceid']]['currentStatusAndTime']['status'];\n    const data = graphData[device['deviceid']]['records'];\n    return(\n        <div className=\"device-holder\" key={device['deviceid']}>\n            <b>Device Id:&nbsp;</b> {device['deviceid']}<br />\n            <b>Status:&nbsp;</b>\n            <span className={status}>\n                {status}\n            </span>\n            <D3Chart data={data}/>\n            <br />\n            <button type=\"button\" className=\"form-submit\" onClick={ (e) => getCSV(data) }>Dump</button><br />\n            <hr />\n        </div>\n    );\n}\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AuthService from './components/AuthService';\nimport withAuth from './components/withAuth';\nimport io from \"socket.io-client\";\nimport Device from './components/Device';\n\nconst Auth = new AuthService();\n\nclass App extends React.Component {\n\n  state = {\n    graphData: {},\n    deviceStatus: []\n  }\n\n  constructor(props) {\n    super(props);\n    //Connection\n    this.deviceList = [];\n    this.initialData = [];\n\n    this.ready = false;\n\n    // this.socket = io(\"http://localhost:5000\", {\n    //   \"transports\": [\"websocket\"]\n    // });\n\n    this.socket = io();\n    \n    this.socket.on('get_device_list', (data) => {\n      this.deviceList = data\n\n      console.log(\"Device List\")\n      console.log(data)\n\n      this.socket.emit('get_initial_data');\n    });\n    \n    this.socket.on('get_initial_data', (data) => {\n      this.setUpGraphData(data);\n\n      console.log(\"Initial Data\")\n      console.log(data)\n\n      this.socket.emit('get_latest_device_status');\n    });\n\n    this.socket.on('get_latest_device_status', (data) => {\n      let temp = this.state.graphData\n      console.log(data)\n      console.log(temp)\n\n      data.forEach((dataRow) => {\n        temp[dataRow['deviceid']]['currentStatusAndTime'] = { status: dataRow['status'], time: dataRow['latest_time_entry'] }\n      });\n      \n\n      console.log(\"From listener of get_latest_devicew_status\")\n      console.log(temp)\n      this.setState({graphData: temp})\n    });\n\n    this.socket.on(\"new_monitor_data\", (data) => {\n      console.log(data)\n\n      if(!this.ready) return;\n      \n      const deviceId = data['deviceId']\n      const newTime = Date.parse(data['time'])\n\n      let temp = this.state.graphData\n      temp[deviceId]['records'].push(data)\n\n      let mostRecentRecordedStatusAndTime = temp[deviceId]['currentStatusAndTime']\n      \n      const lastEntryTime = Date.parse(mostRecentRecordedStatusAndTime['time'])\n\n      console.log(mostRecentRecordedStatusAndTime)\n      console.log(lastEntryTime)\n\n      if(newTime >= lastEntryTime) {\n        console.log(\"Change Detected\")\n        mostRecentRecordedStatusAndTime = data\n      }\n\n      temp[deviceId]['currentStatusAndTime'] = mostRecentRecordedStatusAndTime;\n\n      console.log(\"From new_monitor_data\")\n      console.log(temp)\n      this.setState({ graphData: temp })\n    });\n\n    this.socket.on('connect', (data) => {\n      \n      this.socket\n        .on('authenticated', async () => {\n          console.log(\"Authenticated\");\n          setTimeout(() => {\n            this.initiateProcess();\n            this.ready = true;\n          }, 600);\n        })\n        .emit('authenticate', {token: Auth.getToken()}); //send the jwt\n    });\n  }\n\n  setUpGraphData(initialData) {\n    let graphData = {\n      \n    }\n    this.deviceList.forEach((device) => {\n      graphData[device['deviceid']] = {}\n      graphData[device['deviceid']]['records'] = []\n      graphData[device['deviceid']]['currentStatusAndTime'] = {}\n      console.log(graphData)\n    });\n\n    initialData.forEach((data) => {\n      graphData[data['deviceid']]['records'].push(data)\n    });\n\n    console.log(\"setUpGraphData called\")\n    this.setState({ graphData })\n  }\n\n  componentDidMount() {\n    //this.initiateProcess();\n  }\n\n  handleLogout() {\n    Auth.logout()\n    this.props.history.replace('/login');\n  }\n\n  initiateProcess() {\n    this.socket.emit('get_device_list');\n    console.log(this.state.graphData)\n  }\n\n  render() {\n    \n    return(\n      <div>\n        <div className=\"App-header\">\n          Load Monitor\n        </div>\n        <div className=\"App\">\n          { this.devices() }\n         \n          <button type=\"button\" className=\"form-submit\" onClick={this.handleLogout.bind(this)}>Logout</button><br />\n          <br />\n        </div>\n        \n      </div>\n    );\n  }\n\n  devices() {\n    return this.deviceList.map((device) => {\n      return Device(device, this.state.graphData);\n    });\n  }\n\n  componentWillUnmount() {\n    this.socket.disconnect();\n  }\n\n\n}\n\nexport default withAuth(App);","import React, { Component } from 'react';\nimport AuthService from './AuthService';\n\nexport default function withAuth(AuthComponent) {\n    // Code here now\n    const Auth = new AuthService();\n    return class AuthWrapped extends Component {\n        constructor() {\n            super();\n            this.state = {\n                user: null\n            }\n        }\n\n        componentWillMount() {\n            if (!Auth.loggedIn()) {\n                this.props.history.replace('/login')\n            }\n            else {\n                try {\n                    const profile = Auth.getProfile()\n                    this.setState({\n                        user: profile\n                    })\n                }\n                catch(err){\n                    Auth.logout()\n                    this.props.history.replace('/login')\n                }\n            }\n        }\n\n        render() {\n            if (this.state.user) {\n                return (\n                    <AuthComponent history={this.props.history} user={this.state.user} />\n                )\n            }\n            else {\n                return null\n            }\n        }\n    }\n\n    \n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport './Login.css';\nimport AuthService from './AuthService';\n\nclass Login extends Component {\n\n    constructor(props){\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n        this.Auth = new AuthService(\"\");\n        this.handleFormSubmit = this.handleFormSubmit.bind(this);\n\n        if(this.Auth.loggedIn()) {\n            this.props.history.replace('/');\n        }\n    }\n    render() {\n        return (\n            <div className=\"center\">\n                <div className=\"card\">\n                    <h1>Login</h1>\n                    <form onSubmit={ (e) => this.handleFormSubmit(e) } method=\"POST\">\n                        <input\n                            className=\"form-item\"\n                            placeholder=\"Username goes here...\"\n                            name=\"username\"\n                            type=\"text\"\n                            onChange={this.handleChange}\n                        />\n                        <input\n                            className=\"form-item\"\n                            placeholder=\"Password goes here...\"\n                            name=\"password\"\n                            type=\"password\"\n                            onChange={this.handleChange}\n                        />\n                        <input\n                            className=\"form-submit\"\n                            value=\"SUBMIT\"\n                            type=\"submit\"\n                        />\n                    </form>\n                </div>\n            </div>\n        );\n    }\n\n    handleChange(e){\n        this.setState(\n            {\n                [e.target.name]: e.target.value\n            }\n        )\n    }\n\n    handleFormSubmit(e){\n        e.preventDefault();\n\n        if(!this.state || !this.state.username || !this.state.password) {\n            alert(\"Username/Password is invalid\");\n        } else {\n            this.Auth.login(this.state.username,this.state.password)\n            .then(res =>{\n               this.props.history.replace('/');\n            })\n            .catch(err =>{\n                alert(err);\n            })\n        }\n    }\n}\n\nexport default Login;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Login from './components/Login'\n\nReactDOM.render(\n    <Router>\n        <div>\n            <Route exact path=\"/\" component={App} />\n            <Route exact path=\"/login\" component={Login} />\n        </div>\n    </Router>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}